----form简单操作
    创建表单验证类
    class UserRegister(forms.Form):
    username=forms.CharField(error_messages=user_error_message)
    password=forms.CharField(min_length=6,max_length=12)
    email=forms.EmailField()
    GET请求生成表单
    obj=forms.UserRegister()
    return render(request,'test_form.html',{'obj':obj})
    POST表单验证
    obj = forms.UserRegister(request.POST)
    if obj.is_valid():
        obj_data=obj.cleaned_data
    else:
        print(obj.errors.as_json())
        return render(request, 'test_form.html',{'obj':obj})
    模板中使用
    <form action="{% url 'test-form' %}" method="post">
        {% csrf_token %}
        <p>{{ obj.username }}{{ obj.errors.username.0 }}</p>
        <p>{{ obj.password }}{{ obj.errors.password.0 }}</p>
        <p>{{ obj.email }}{{ obj.errors.email.0 }}</p>
        <input type="submit" value="提交">
    </form>
    简单的模板使用
    {{ obj.as_p }}
    {{ obj.as_ul }}
    <table>
        {{ obj.as_table }}
    </table>
----form
    字段(本身只做验证)
    from django.forms import fields
        email=fields.EmailField()
    插件(生成html标签)
    from django.forms import widgets
        email=fields.EmailField(
            widget=widgets.EmailInput
        )
    插件属性(定义标签属性)
    email=fields.EmailField(
            widget=widgets.EmailInput(attrs={'class':'r1 r2'})
        )
----字段通用属性(fields)
    field(通用字段)
        required=True,               是否允许为空
        widget=None,                 HTML插件
        label=None,                  用于生成Label标签或显示内容
        initial=None,                初始值
        help_text='',                帮助信息(在标签旁边显示)
        error_messages=None,         错误信息 {'required': '不能为空', 'invalid': '格式错误'}
        show_hidden_initial=False,   是否在当前插件后面再加一个隐藏的且具有默认值的插件（可用于检验两次输入是否一直）
        validators=[RegexValidator(r'正则', 'error_message'), RegexValidator(r'正则', 'error_message')],   自定义验证规则
        localize=False,              是否支持本地化(时间)
        disabled=False,              是否可以编辑
        label_suffix=None            Label内容后缀
----普通字段(fields)
    CharField(Field) 字符字段验证
        max_length=None,             最大长度
        min_length=None,             最小长度
        strip=True                   是否移除用户输入空白
    IntegerField(Field) 数字字段验证
        max_value=None,              最大值
        min_value=None,              最小值
    FloatField(IntegerField) 浮点数地段验证
        ...
    DecimalField(IntegerField)
        max_value=None,              最大值
        min_value=None,              最小值
        max_digits=None,             总长度
        decimal_places=None,         小数位长度
----时间字段(fields)
    BaseTemporalField(Field)
        input_formats=None          时间格式化
    DateField(BaseTemporalField)    格式：2015-09-01
    TimeField(BaseTemporalField)    格式：11:12
    DateTimeField(BaseTemporalField)格式：2015-09-01 11:12
    DurationField(Field)            时间间隔：%d %H:%M:%S.%f
----其他正则字段(fields)
    RegexField(CharField)
        regex,                      自定制正则表达式
        max_length=None,            最大长度
        min_length=None,            最小长度
        error_message=None,         忽略，错误信息使用 error_messages={'invalid': '...'}
    邮箱
    EmailField(CharField)
        ...
    文件
    FileField(Field)
        allow_empty_file=False     是否允许空文件
    图片
    ImageField(FileField)
        ...
        注：需要PIL模块，pip3 install Pillow
        以上两个字典使用时，需要注意两点：
            - form表单中 enctype="multipart/form-data"
            - view函数中 obj = MyForm(request.POST, request.FILES)
    邮件
    URLField(Field)
        ...
    布尔值
    BooleanField(Field)
        ...
    NullBooleanField(BooleanField)
        ...
----特殊字段验证
    选择框验证
    ChoiceField(Field)
        ...
        choices=(),                选项，如：choices = ((0,'上海'),(1,'北京'),)
        required=True,             是否必填
        widget=None,               插件，默认select插件
        label=None,                Label内容
        initial=None,              初始值
        help_text='',              帮助提示
    ModelChoiceField(ChoiceField)
        ...                        django.forms.models.ModelChoiceField
        queryset,                  # 查询数据库中的数据
        empty_label="---------",   # 默认空显示内容
        to_field_name=None,        # HTML中value的值对应的字段
        limit_choices_to=None      # ModelForm中对queryset二次筛选
    ModelMultipleChoiceField(ModelChoiceField)
        ...                        django.forms.models.ModelMultipleChoiceField
    TypedChoiceField(ChoiceField)
        coerce = lambda val: val   对选中的值进行一次转换
        empty_value= ''            空值的默认值

    MultipleChoiceField(ChoiceField)
        ...
    TypedMultipleChoiceField(MultipleChoiceField)
        coerce = lambda val: val   对选中的每一个值进行一次转换
        empty_value= ''            空值的默认值
    ComboField(Field)
        fields=()                  使用多个验证，如下：即验证最大长度20，又验证邮箱格式
                                   fields.ComboField(fields=[fields.CharField(max_length=20), fields.EmailField(),])
    MultiValueField(Field)
        PS: 抽象类，子类中可以实现聚合多个字典去匹配一个值，要配合MultiWidget使用
    SplitDateTimeField(MultiValueField)
        input_date_formats=None,   格式列表：['%Y--%m--%d', '%m%d/%Y', '%m/%d/%y']
        input_time_formats=None    格式列表：['%H:%M:%S', '%H:%M:%S.%f', '%H:%M']
    FilePathField(ChoiceField)     文件选项，目录下文件显示在页面中
        path,                      文件夹路径
        match=None,                正则匹配
        recursive=False,           递归下面的文件夹
        allow_files=True,          允许文件
        allow_folders=False,       允许文件夹
        required=True,
        widget=None,
        label=None,
        initial=None,
        help_text=''
    GenericIPAddressField
        protocol='both',           both,ipv4,ipv6支持的IP格式
        unpack_ipv4=False          解析ipv4地址，如果是::ffff:192.0.2.1时候，可解析为192.0.2.1， PS：protocol必须为both才能启用
    SlugField(CharField)           数字，字母，下划线，减号（连字符）
        ...
    UUIDField(CharField)           uuid类型
        ...
----选择框字段
    单radio，值为字符串
        user = fields.CharField(
            initial=2,
            widget=widgets.RadioSelect(choices=((1,'上海'),(2,'北京'),))
        )
    单radio，值为字符串
        user = fields.ChoiceField(
            choices=((1, '上海'), (2, '北京'),),
            initial=2,
            widget=widgets.RadioSelect
        )
    单select，值为字符串
        user = fields.CharField(
            initial=2,
            widget=widgets.Select(choices=((1,'上海'),(2,'北京'),))
        )
    单select，值为字符串
        user = fields.ChoiceField(
            choices=((1, '上海'), (2, '北京'),),
            initial=2,
            widget=widgets.Select
        )
    多选select，值为列表
        user = fields.MultipleChoiceField(
            choices=((1,'上海'),(2,'北京'),),
            initial=[1,],
            widget=widgets.SelectMultiple
        )
    单checkbox
        user = fields.CharField(
            widget=widgets.CheckboxInput()
        )
    多选checkbox,值为列表
        user = fields.MultipleChoiceField(
            initial=[2, ],
            choices=((1, '上海'), (2, '北京'),),
            widget=widgets.CheckboxSelectMultiple
        )
----内置插件
    TextInput(Input)
    NumberInput(TextInput)
    EmailInput(TextInput)
    URLInput(TextInput)
    PasswordInput(TextInput)
    HiddenInput(TextInput)
    Textarea(Widget)
    DateInput(DateTimeBaseInput)
    DateTimeInput(DateTimeBaseInput)
    TimeInput(DateTimeBaseInput)
    CheckboxInput
    Select
    NullBooleanSelect
    SelectMultiple
    RadioSelect
    CheckboxSelectMultiple
    FileInput
    ClearableFileInput
    MultipleHiddenInput
    SplitDateTimeWidget
    SplitHiddenDateTimeWidget
    SelectDateWidget
----初始化表单值
    if request.method=='GET':
        #username对应form表单中的字段
        obj=forms.UserRegister({
            'username':'小明'
        })


